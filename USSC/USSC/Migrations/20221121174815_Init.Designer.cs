// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using USSC;

#nullable disable

namespace USSC.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221121174815_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("USSC.Entities.ApplicationDirectionsfkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DirectionsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DirectionsId");

                    b.ToTable("ApplicationDirectionsfk");
                });

            modelBuilder.Entity("USSC.Entities.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Course")
                        .HasColumnType("integer");

                    b.Property<string>("Faculty")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Speciality")
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("USSC.Entities.DirectionsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Directions")
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("USSC.Entities.PracticesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Practices");
                });

            modelBuilder.Entity("USSC.Entities.TeachersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Teacher")
                        .HasColumnType("text");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("USSC.Entities.TestCaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Allow")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestCase");
                });

            modelBuilder.Entity("USSC.Entities.UsersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("USSC.Entities.UsersPracticesfkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PracticeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PracticesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PracticesId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPracticesfk");
                });

            modelBuilder.Entity("USSC.Entities.ApplicationDirectionsfkEntity", b =>
                {
                    b.HasOne("USSC.Entities.ApplicationEntity", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USSC.Entities.DirectionsEntity", "Directions")
                        .WithMany()
                        .HasForeignKey("DirectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Directions");
                });

            modelBuilder.Entity("USSC.Entities.DirectionsEntity", b =>
                {
                    b.HasOne("USSC.Entities.TeachersEntity", "Teacher")
                        .WithMany("Directions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("USSC.Entities.TeachersEntity", b =>
                {
                    b.HasOne("USSC.Entities.TestCaseEntity", "TestCase")
                        .WithMany("Teachers")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("USSC.Entities.UsersEntity", b =>
                {
                    b.HasOne("USSC.Entities.ApplicationEntity", "Application")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USSC.Entities.TestCaseEntity", "TestCase")
                        .WithMany("Users")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("USSC.Entities.UsersPracticesfkEntity", b =>
                {
                    b.HasOne("USSC.Entities.PracticesEntity", "Practices")
                        .WithMany()
                        .HasForeignKey("PracticesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("USSC.Entities.UsersEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practices");

                    b.Navigation("User");
                });

            modelBuilder.Entity("USSC.Entities.ApplicationEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("USSC.Entities.TeachersEntity", b =>
                {
                    b.Navigation("Directions");
                });

            modelBuilder.Entity("USSC.Entities.TestCaseEntity", b =>
                {
                    b.Navigation("Teachers");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
